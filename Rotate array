Rotate array
Given an array with N elements, the task is to rotate the array to the right by K steps.

Note : if K is negative , rotate the array to the left.

Input Format
The first line contains an integer N representing the size of the array.

The second line contains N space-separated integers representing the elements of the array.

The last line contains an integer K representing the number of times the array has to be rotated in the right direction if k is positive , otherwise to the left if k is negative.

Output Format
The only line of the output prints N space-separated integers representing the Rotated array elements.

Example 1
Input


8
7 5 2 11 2 43 1 1
2

Output

1 1 7 5 2 11 2 43 

Explanation

Rotate 1 steps to the right : 1 7 5 2 11 2 43 1

Rotate 2 steps to the right : 1 1 7 5 2 11 2 43

Example 2
Input


8
7 5 2 11 2 43 1 1
3

Output


43 1 1 7 5 2 11 2 

Explanation

Rotate 1 steps to the right : 1 7 5 2 11 2 43 1

Rotate 2 steps to the right : 1 1 7 5 2 11 2 43

Rotate 3 steps to the right : 43 1 1 7 5 2 11 2

Constraints
1 <= N <= 10^3

1 <= arr[i] <= 10^9

-10^9 <= K < 10^9



import java.util.*;

public class Main {
    public static void main(String[] args) throws Throwable {
        solve();
    }

    public static void solve() {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); // number of elements
        int arr[] = new int[n];
        // Initializing array elements
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int k = sc.nextInt(); // No. of times to rotate
        rotateArray(arr, n, k);
    }

	public static void reverseArray(int arr[], int start, int end)
    {
		int i = start;
		int j = end;
		
		while(i<j)
		{
		    int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp; 
		    i = i + 1;
		    j = j - 1;
		}
    } 

    public static void rotateArray(int arr[], int n, int k) 
    {
        // STEP 1 --> Reverse first k elements 
        reverseArray(arr, 0, k-1);
        
        // STEP 2 --> Reverse remaining elements (last n-k elements)
        reverseArray(arr, k, n-1);
        
        // STEP 3 --> Reverse entire array 
        reverseArray(arr, 0, n-1);
        
        for(int i=0; i<n; i=i+1)
        {
            System.out.print(arr[i] + " ");
        }
    }

}



